//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Servicio.AppWind.ProxyWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyWCF.ICalculadora")]
    public interface ICalculadora {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Sumar", ReplyAction="http://tempuri.org/ICalculadora/SumarResponse")]
        decimal Sumar(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Sumar", ReplyAction="http://tempuri.org/ICalculadora/SumarResponse")]
        System.Threading.Tasks.Task<decimal> SumarAsync(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Restar", ReplyAction="http://tempuri.org/ICalculadora/RestarResponse")]
        decimal Restar(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Restar", ReplyAction="http://tempuri.org/ICalculadora/RestarResponse")]
        System.Threading.Tasks.Task<decimal> RestarAsync(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Multiplicar", ReplyAction="http://tempuri.org/ICalculadora/MultiplicarResponse")]
        decimal Multiplicar(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Multiplicar", ReplyAction="http://tempuri.org/ICalculadora/MultiplicarResponse")]
        System.Threading.Tasks.Task<decimal> MultiplicarAsync(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Dividir", ReplyAction="http://tempuri.org/ICalculadora/DividirResponse")]
        decimal Dividir(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Dividir", ReplyAction="http://tempuri.org/ICalculadora/DividirResponse")]
        System.Threading.Tasks.Task<decimal> DividirAsync(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/cuadrado", ReplyAction="http://tempuri.org/ICalculadora/cuadradoResponse")]
        double cuadrado(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/cuadrado", ReplyAction="http://tempuri.org/ICalculadora/cuadradoResponse")]
        System.Threading.Tasks.Task<double> cuadradoAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/raiz", ReplyAction="http://tempuri.org/ICalculadora/raizResponse")]
        double raiz(decimal x, decimal y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/raiz", ReplyAction="http://tempuri.org/ICalculadora/raizResponse")]
        System.Threading.Tasks.Task<double> raizAsync(decimal x, decimal y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculadoraChannel : Servicio.AppWind.ProxyWCF.ICalculadora, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculadoraClient : System.ServiceModel.ClientBase<Servicio.AppWind.ProxyWCF.ICalculadora>, Servicio.AppWind.ProxyWCF.ICalculadora {
        
        public CalculadoraClient() {
        }
        
        public CalculadoraClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal Sumar(decimal x, decimal y) {
            return base.Channel.Sumar(x, y);
        }
        
        public System.Threading.Tasks.Task<decimal> SumarAsync(decimal x, decimal y) {
            return base.Channel.SumarAsync(x, y);
        }
        
        public decimal Restar(decimal x, decimal y) {
            return base.Channel.Restar(x, y);
        }
        
        public System.Threading.Tasks.Task<decimal> RestarAsync(decimal x, decimal y) {
            return base.Channel.RestarAsync(x, y);
        }
        
        public decimal Multiplicar(decimal x, decimal y) {
            return base.Channel.Multiplicar(x, y);
        }
        
        public System.Threading.Tasks.Task<decimal> MultiplicarAsync(decimal x, decimal y) {
            return base.Channel.MultiplicarAsync(x, y);
        }
        
        public decimal Dividir(decimal x, decimal y) {
            return base.Channel.Dividir(x, y);
        }
        
        public System.Threading.Tasks.Task<decimal> DividirAsync(decimal x, decimal y) {
            return base.Channel.DividirAsync(x, y);
        }
        
        public double cuadrado(int x, int y) {
            return base.Channel.cuadrado(x, y);
        }
        
        public System.Threading.Tasks.Task<double> cuadradoAsync(int x, int y) {
            return base.Channel.cuadradoAsync(x, y);
        }
        
        public double raiz(decimal x, decimal y) {
            return base.Channel.raiz(x, y);
        }
        
        public System.Threading.Tasks.Task<double> raizAsync(decimal x, decimal y) {
            return base.Channel.raizAsync(x, y);
        }
    }
}
